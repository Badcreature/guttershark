package net.guttershark.util.crypt{	/**	 * Encrypts and decrypts strings using the RC4 (aka ARCFOUR) cipher 	 * used most commonly in SSL transactions.	 * @see http://en.wikipedia.org/wiki/RC4	 */	final public class RC4	{				protected static var sbox:Array = new Array(255);		protected static var mykey:Array = new Array(255);		/**		 * Encrypts a string with the provided key.		 * 		 * @param src The string to encrypt.		 * @param key The encryption key.		 */		public static function encrypt(src:String, key:String):String 		{			var mtxt:Array = strToChars(src);			var mkey:Array = strToChars(key);			var result:Array = calculate(mtxt,mkey);			return charsToHex(result);		}		/**		 * Decrypts a string with the specified key.		 * 		 * @param src The string to decrypt		 * @param key The decryption key		 */		public static function decrypt(src:String, key:String):String 		{			var mtxt:Array = hexToChars(src);			var mkey:Array = strToChars(key);			var result:Array = calculate(mtxt,mkey);			return charsToStr(result);		}				private static function initialize(pwd:Array):void 		{			var b:Number = 0;			var tempSwap:Number;			var intLength:Number = pwd.length;			var a:int = 0;			for(a;a<=255;a++) 			{				mykey[a] = pwd[(a % intLength)];				sbox[a] = a;			}			for(a=0;a<=255; a++) 			{				b = (b + sbox[a] + mykey[a]) % 256;				tempSwap = sbox[a];				sbox[a] = sbox[b];				sbox[b] = tempSwap;			}		}		private static function calculate(plaintxt:Array, psw:Array):Array 		{			initialize(psw);			var i:Number = 0; 			var j:Number = 0;			var cipher:Array = new Array();			var k:Number, temp:Number, cipherby:Number;			var a:int = 0;			var l:int = plaintxt.length;			for(a;a<l;a++) 			{				i = (i + 1) % 256;				j = (j + sbox[i]) % 256;				temp = sbox[i];				sbox[i] = sbox[j];				sbox[j] = temp;				var idx:Number = (sbox[i] + sbox[j]) % 256;				k = sbox[idx];				cipherby = plaintxt[a] ^ k;				cipher.push(cipherby);			}			return cipher;		}		private static function charsToHex(chars:Array):String 		{			var result:String = new String("");			var hexes:Array = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");			var i:int = 0;			var l:int = chars.length;			for(i;i<l;i++) result += hexes[chars[i] >> 4] + hexes[chars[i] & 0xf];			return result;		}		private static function hexToChars(hex:String):Array 		{			var codes:Array = new Array();			var l:int = hex.length;			for(var i:Number =(hex.substr(0,2)=="0x")?2:0;i<l;i+=2) codes.push(parseInt(hex.substr(i,2),16));			return codes;		}		private static function charsToStr(chars:Array):String 		{			var result:String = new String("");			var i:int = 0;			var l:int = chars.length;			for(i;i<l;i++) result += String.fromCharCode(chars[i]);			return result;		}		private static function strToChars(str:String):Array 		{			var codes:Array = new Array();			var i:int = 0;			var l:int = str.length;			for(i;i<l;i++) codes.push(str.charCodeAt(i));			return codes;		}		}}