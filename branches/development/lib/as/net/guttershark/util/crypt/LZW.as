package net.guttershark.util.crypt{	/**	 * Compresses and decompresses text with the LZW algorithm.	 * @see http://en.wikipedia.org/wiki/Lempel-Ziv-Welch	 */	final public class LZW	{		/**		 * Compresses a string as LZW.		 * @param src The string to compress.		 */		public static function compress(src:String):String 		{			var chars:Number = 256;			var original:String = src;			var dict:Array = new Array();			var i:int = 0;			var l:int = chars;			var xstr:String;			for (i;i<l;i++) dict[String(i)] = i;			var result:String = new String("");			var splitted:Array = original.split("");			var buffer:Array = new Array();			l = splitted.length;			for(i=0;i<=l;i++) 			{				var current:String = splitted[i];				if (buffer.length == 0) xstr = String(current.charCodeAt(0));				else xstr = buffer.join("-") + "-" + String(current.charCodeAt(0));				if (dict[xstr] !== undefined) buffer.push(current.charCodeAt(0));				else 				{					result += String.fromCharCode(dict[buffer.join("-")]);					dict[xstr] = chars;					chars++;					buffer = [];					buffer.push(current.charCodeAt(0));				}			}			return result;		}		/**		 * Decompresses an LZW string.		 * 		 * @param src The string to decompress.		 */		public static function decompress(src:String):String 		{			var chars:Number = 256;			var dict:Array = new Array();			var i:int = 0;			var l:int = chars;			for (i;i<l;i++) 			{				var c:String = String.fromCharCode(i);				dict[i] = c;			}			var original:String = src;			var splitted:Array = original.split("");			var buffer:String = new String("");			var chain:String = new String("");			var result:String = new String("");			l = splitted.length;			for(i=0;i<l;i++) 			{				var code:Number = original.charCodeAt(i);				var current:String = dict[code];				if (buffer == "") 				{					buffer = current;					result += current;				}				else 				{					if (code <= 255) 					{						result += current;						chain = buffer + current;						dict[chars] = chain;						chars++;						buffer = current;					}					else 					{						chain = dict[code];						if (chain == null) chain = buffer + buffer.slice(0,1);						result += chain;						dict[chars] = buffer + chain.slice(0,1);						chars++;						buffer = chain;					}				}			}			return result;		}			}}