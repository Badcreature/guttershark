package net.guttershark.util.validators{	import net.guttershark.util.crypt.Luhn;	import net.guttershark.util.types.StringUtils;	/**	 * CreditCardValidator class provides basic credit card 	 * validation before sending to a CC gateway.	 */	final public class CreditCardValidator	{		protected static const DEFAULT_ENCODE_DIGITS_SHOWN:int = 4;		protected static const DEFAULT_ENCODE_CHARACTER:String = '*';		protected static const MINIMUM_CARD_LENGTH:int = 13;		protected static const MAXIMUM_CARD_LENGTH:int = 16;		/**		 * Validate a credit card's expiration date.		 * 		 * @param month The month.		 * @param year The year.		 * 		 * @example Validate an expiration date:		 * <listing>			 * var isValidDate:Boolean = CreditCardValidator.isValidExDate(11,2010);		 * </listing>		 */		public static function isValidExDate(month:int, year:int):Boolean 		{			var d:Date = new Date();			var currentMonth:int = d.getMonth() + 1;			var currentYear:int = d.getFullYear();			if((year > currentYear) || (year == currentYear && month >= currentMonth)) return true;			return false;		}		/**		 * Validate a credit card number.		 * 		 * @param strNumber Credit card number as string		 * 		 * @example	Validate a credit card.		 * <listing>			 * var isValidNumber:Boolean = CreditCardValidator.isValidNumber("1234567890123456");		 * </listing>		 */		public static function isValidNumber(strNumber:String):Boolean		{			var ccNumber:String = StringUtils.toNumeric(strNumber);			if(ccNumber.length > 0 && !isNaN(ccNumber as Number) && (ccNumber.length >= MINIMUM_CARD_LENGTH && ccNumber.length <= MAXIMUM_CARD_LENGTH)) return Luhn.mod10(ccNumber); 			return false;		}		/**		 * Encode a credit card number as a string and encode all digits except the last <em></code>digitsShown</code></em>.		 * 		 * @param strNumber	credit card number as string		 * @param digitsShown	display this many digits at the end of the card number for security purposes		 * @param encodeChar	optional encoding character to use instead of default '*'		 * 		 * @example		 * <listing>			 * trace(CreditCardValidator.EncodeNumber("1234567890123456")); // ************3456		 * trace(CreditCardValidator.EncodeNumber("1234567890123456", 5, "x"));  // xxxxxxxxxxx23456		 * </listing>		 */		public static function encodeNumber(strNumber:String, digitsShown:uint = DEFAULT_ENCODE_DIGITS_SHOWN, encodeChar:String = DEFAULT_ENCODE_CHARACTER):String 		{			var encoded:String = "";			for(var i:Number = 0;i < strNumber.length - digitsShown; i++) encoded += encodeChar;			encoded += strNumber.slice(-digitsShown);			return encoded;		}			}}