package net.guttershark.util.collections {	/**	 * The ArrayBidirectionalIterator class provides a non-destructive,	 * pointer-based, bi-directional array iterator.	 */	public class ArrayBidirectionalIterator	{		/**		 * @private		 */		protected var _array:Array;				/**		 * @private		 */		protected var _pointer:int;		/**		 * Constructor for ArrayBidirectionalIterator instances.		 * 		 * @param array The array to iterate over.		 */		public function ArrayBidirectionalIterator(array:Array) 		{			_array=array.concat();			reset();		}		/**		 * The previous element, or null.		 */		public function previous():Object		{			return hasPrevious()?_array[_pointer--]:null;		}		/**		 * The next element, or null.		 */		public function next():Object 		{			return hasNext()?_array[_pointer++]:null;		}				/**		 * The current element.		 */		public function current():Object 		{			return _array[_pointer];		}		/**		 * Resets the pointer.		 */		public function reset():void		{			_pointer = 0;		}		/**		 * Check if iterator has a previous element.		 */		public function hasPrevious():Boolean 		{			return (_pointer>-1);		}			/**		 * Check if iterator has a next element.		 */		public function hasNext():Boolean 		{			return (_pointer<_array.length);		}		/**		 * Return a glimpse of the previous element without 		 * updating the array element pointer, or <code>null</code>.		 */		public function glimpse():Object		{			return (_pointer-1>=0)?_array[_pointer-1]:null;		}				/**		 * Return a peek of the next element without 		 * updating the array element pointer, or <code>null</code>.		 */		public function peek():Object		{			return (_pointer+1<=_array.length )?_array[_pointer + 1]:null;		}		/**		 * The collection length.		 */		public function get length():int 		{			return _array.length;		}		/**		 * @private		 * The interative pointer index.		 */		public function get pointer():int		{			return _pointer;		}		/**		 * @private		 */		public function set pointer(i:int):void 		{			_pointer = i;		}				/**		 * Dispose of this iterator.		 */		public function dispose():void		{			_pointer = 0;			_array = null;		}	}}