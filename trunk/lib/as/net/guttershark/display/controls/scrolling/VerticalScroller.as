package net.guttershark.ui.controls.scrolling {		import flash.display.MovieClip;	import fl.events.ScrollEvent;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;		import gs.TweenLite;	/**	 * A generic vertical scroll utility. No visual aspect is 	 * taken care of with this component,	 * EXCEPT setting the mask over the content container, other	 * than that it's up to you, and the component just handles	 * calculating scrolling based off the pieces you give it.	 * 	 * EX Usage:	 * <code><pre>	 * var scroll:VerticalScroller = new VerticalScroller();	 * scroll.contentContainer = myContentClip;	 * scroll.contentMask = myMaskingClip;	 * scroll.handle = myHandleClip;	 * scroll.track = myTrackClip;	 * scroll.scrollUpButton = byButton;	 * scroll.scrollDownButton = byOtherButton;	 * </pre></code>	 */	public class VerticalScroller extends MovieClip	{				/**		 * The content containing clip.		 */		protected var _contentContainer:MovieClip;				/**		 * Mask used on content containing clip.		 */		protected var _contentMask:MovieClip;				/**		 * Handle control		 */		protected var _handle:MovieClip;				/**		 * The track control.		 */		protected var _track:MovieClip;				/**		 * The up button control		 */		protected var _up:MovieClip;				/**		 * The down button control		 */		protected var _down:MovieClip;				/**		 * The tween time for every up / down button click.		 */		public var tweenTimeOnJump:Number = .5;				/**		 * The number of pixels to move the handle for every up / down click.		 * 		 * See jumpRatio as well for anothe way to control the jump amount.		 */		public var jumpAmount:Number;				/**		 * A jump ratio means that a ratio can be used to jump		 * the handle up / down pixels, depending on the height		 * of the content containing clip.		 * 		 * As an example, say the content containing clip is 		 * 400 pixels tall, and the ratio is set to 10, that means		 * that for every click, 400/10 will be used as the jump value		 * instead of the "jumpAmount" variable. That would be 40 pixels		 * to jump up or down.		 * 		 * If this is set, it cancel's out the jumpAmount value.		 */		public var jumpRatio:Number = 40;				/**		 * If true, and the contentMask is taller than		 * the contentContainer, then all of the pieces 		 * in the scroller are hidden.		 */		public var hideIfNotScrollable:Boolean = true;				/**		 * The bounds that the track is dragable within.		 */		private var trackBounds:Rectangle;				/**		 * Set this scroll components handle movie clip.		 * 		 * @param	MovieClip	The movie clip to use as the handle on the scroller.		 */		public function set handle(clip:MovieClip):void		{			_handle = clip;			_handle.addEventListener(MouseEvent.MOUSE_DOWN, startScroll);			_handle.addEventListener(MouseEvent.MOUSE_UP, stopScroll);			if(!_track)				throw new Error("Set the track before setting the handle. Coordinates are needed from it.");			trackBounds = new Rectangle(0,0,0,(_track.height - _handle.height));			trackBounds.y = _track.y;			trackBounds.x = _track.x;			setScrollable();		}				/**		 * Kicks off scrolling.		 */		private function startScroll(me:MouseEvent):void		{			try			{				if(!_handle.stage.hasEventListener(MouseEvent.MOUSE_UP))					_handle.stage.addEventListener(MouseEvent.MOUSE_UP, stopScroll);			}			catch(e:*){}			_handle.startDrag(true,trackBounds);			_handle.addEventListener(Event.ENTER_FRAME, scroll);		}				private function handleScrollWheel(me:MouseEvent):void		{			if(me.delta>0){				jumpDown(me);			}else{				jumpUp(me);			}		}				/**		 * Haults scrolling.		 */		private function stopScroll(me:MouseEvent):void		{			_handle.stopDrag();			_handle.removeEventListener(Event.ENTER_FRAME, scroll);		}				/**		 * Set this scroll components up button movie clip.		 * 		 * @param	MovieClip	The movie clip to use as the scroll up button.		 */		public function set scrollUpButton(clip:MovieClip):void		{			if(!clip) throw new Error("Null reference was passed as the scrollUpButton");			_up = clip;			_up.addEventListener(MouseEvent.CLICK, jumpDown);		}				/**		 * Set this scroll components down button movie clip.		 * 		 * @param	MovieClip	The movie clip to use as the scroll down button.		 */		public function set scrollDownButton(clip:MovieClip):void		{			if(!clip) throw new Error("Null reference was passed as the scrollDownButton");			_down = clip;			_down.addEventListener(MouseEvent.CLICK, jumpUp);			setScrollable();		}				/**		 * When the scrollDownButton is pressed.		 */		private function jumpDown(me:MouseEvent):void		{			var j:Number = (jumpRatio) ? (_contentContainer.height / jumpRatio) : jumpAmount;			_handle.y = (Math.max(0, (_handle.y - j)));			var position:Number = getNextPosition();			TweenLite.to(_contentContainer,tweenTimeOnJump,{overwrite:true,y:position});		}				/**		 * When the scrollUpButton is pressed.		 */		private function jumpUp(me:MouseEvent):void		{			var j:Number = (jumpRatio) ? (_contentContainer.height / jumpRatio) : jumpAmount;			_handle.y = (Math.min(_track.height-_handle.height, (_handle.y + j)));			var position:Number = getNextPosition();			TweenLite.to(_contentContainer,tweenTimeOnJump,{overwrite:true,y:position});		}		/**		 * Set this scroll components track movie clip.		 * 		 * @param	MovieClip	The movie clip that is the track for the scroller.		 */		public function set track(clip:MovieClip):void		{			if(!clip) throw new Error("Null reference was passed as the track movie clip");			_track = clip;			setScrollable();		}				/**		 * Set this scroll components content masking movie clip.		 * 		 * @param	MovieClip	The movie clip to be used as the mask on the content container.		 */		public function set contentMask(clip:MovieClip):void		{			if(!clip) throw new Error("Null reference was passed as the contentMask");			_contentMask = clip;			_contentContainer.mask = _contentMask;			setScrollable();		}				/**		 * Set this scroll components content containing movie clip.		 * 		 * @param	MovieClip	The movie clip that holds the content needing to be scrolled.		 */		public function set contentContainer(clip:MovieClip):void		{			if(!clip) throw new Error("Null reference was passed as the contentContainer");			_contentContainer = clip;			_contentContainer.addEventListener(MouseEvent.MOUSE_WHEEL, handleScrollWheel);			setScrollable();		}				/**		 * Handles showing or hiding the scroll components based.		 */		private function setScrollable():void		{			if(!hideIfNotScrollable) return;						if(!_contentMask || !_contentContainer || !_handle || !_track) return;										if(_contentMask.height >= _contentContainer.height)			{				_handle.visible = false;				_track.visible = false;			}		}				/**		 * Public accessible way to have this component,		 * invalidate the state of the involved components.		 * And show or hide them, based on the height of the 		 * content mask and content container.		 */		public function updateScrollable():void		{			setScrollable();		}				/**		 * Get's the next position of the contentContainer.		 */		private function getNextPosition():Number		{			var scrollableAmnt:Number =  Math.ceil( (_contentContainer.height) - (_contentMask.height));			var position:Number = -(((scrollableAmnt / (_track.height - _handle.height)) * _handle.y));			return position;		}				/**		 * Called enter frame while the handle is being		 * dragged to update position of content clip.		 */		protected function scroll(me:Event):void		{			var scrollableAmnt:Number =  Math.ceil( (_contentContainer.height) - (_contentMask.height));			var position:Number = -(((scrollableAmnt / (_track.height - _handle.height)) * _handle.y));			_contentContainer.y = position;			dispatchEvent(new ScrollEvent("vertical",0,position));		}	}}